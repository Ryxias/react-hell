<div class="blog-container">

  <div class="entry-container">
    <div class="entry-title-container">
      <span class="entry-title">What even is CSS?</span>
      <span class="entry-date">2017-09-10</span>
    </div>
    <div class="entry-body">
      <div>
        I find myself writing my first blog entry, seated on the comfy sofa of Tiffany's home.
        There are sounds of elation that fill the room, upon her first realization that mounted
        Epona combat is a thing in the new Legend of Zelda everybody is raving about.
      </div>

      <div>
        Well, here I go.  Reading this you probably already know me, so I won't go into
        obligatory introduction this, or skill description that.  Instead, I will use this
        blog as somewhat of a journal that chronicles my adventures through the wild and
        wondrous land of <strong><i>web development</i></strong>!  In this blog you should
        expect a menagerie of, perhaps, any of the following things:
      </div>

      <div>
        <ul>
          <li>Disconnected but practical knowledge about all things websites</li>
          <li>Snarky humor</li>
          <li>Blobs of ranting text</li>
          <li>Angry ranting at the toxic state of certain unnamed pieces of tech</li>
          <li>A general sentiment of optimistic nihilism</li>
          <li>Me ruminating about product releases</li>
        </ul>
      </div>


      <div>
        Without further ado, let's get started!
        <br /><br />
        Today I learned CSS.  Well, I learned some new things about it. Suffice to say, I am
        trash at frontend.  I imagine this will result in an entertaining post.
      </div>

      <div>
        Coming from the narrow focus of backend technology, I find the world of CSS foreign,
        insensible, downright terrifying.  The deluge of selectors and css modifiers create
        a fun filled land of all things great, many things terrible.  Like waltzing through
        a Chocolate Factory of sorts but much less sweet.  Let's summarize what I've learned...
      </div>

      <div>
        <strong>width, flex-direction</strong>
      </div>

      <div>
        What even is mobile.  Seriously.  I suppose I shouldn't <i>really</i> be complaining,
        what with the world of backend being an equivalent cacophony of versions, environments,
        systems, so on and so forth.  Yet I still find myself a frustrated mess, attempting
        to make sense of the madness of having <i>not only</i> to accommodate for four (or
        more) different browsers on desktop applications, but also the variations of mobile
        client viewports.
      </div>

      <div>
        Upon first building <a href="/">chuuni.me</a> about a week ago, I cobbled together
        some blah 5-minute CSS and made the site... palatable.  Barely.  An obnoxious coat of
        pink font over a dark, angsty edgelord dark blue.  Perfect to satisfy the Dark Lord.
      </div>

      <div>
        Of course the logical thing is to only test functionality of the site on an
        up-to-date build of Google Chrome on a brand new 2016 Apple Macbook.  LGTM pretty
        much.
      </div>

      <div>
        Of course embarrassment followed when I excitedly attempted to show off the new site
        on my iPhone.  Takanashi Rikka's face stretched alllllllllll the way across and off
        the screen.  Like that pancake you flipped but it landed half off the edge and you
        don't want to move it out of fear of breaking it more but it's already too late.
      </div>

      <div>
        In our modern iteration of viewport compatibility it seems like using absolute values
        like <pre>width: 750px;</pre> is just not kosher.  Height, on the other hand, I guess
        you can still get away with.  <small>Until they come out with some app where the only
        valid scrolling motions are left and... oh wait a minute.</small>
      </div>

      <div>
        For beginner level mobile compatibility, percent width seems to be king.
        <pre>width: 100%</pre>.  Truly the American way.
      </div>

      <div>
        <strong>text-decoration, color, and its effect on a tags</strong>
      </div>

      <div>
        A nasty little tidbit that caught me was the ineffectiveness of
        <pre>text-decoration: none</pre> on a elements.  Of course, a seasoned frontend dev
        would know this!  That &lt;a&gt; tags are unruly children, and don't follow their
        parents' orders, and instead opt to decide their own fates as obnoxious blue,
        underlined text.
      </div>

      <div>
        Of course, in CSS, children can be coerced into doing anything you want them to.
        And in this case, I decided to just slap the &lt;a&gt; tag with some
        <pre>text-decoration: none</pre>.  Easy enough.  You can see it in the logo now.
      </div>

      <div>
        Enough for me for one night.  The HTML on this page is also written entirely by hand,
        and is quite irritating.  I will think of doing a Markdown -> HTML parser on the
        backend.
      </div>

      <strong></strong>

    </div>
  </div>

</div>
