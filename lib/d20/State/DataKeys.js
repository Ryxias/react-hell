'use strict';

const SkillRepository = require('../Data/SkillRepository');

/**
 * Foundation stats are thought of "what you truly are".  These values almost never change and are used to
 * derive most of the rest of the character's stats.
 *
 * A good litmus test for what belongs in foundation is the answer to the question: "What am I when I am dead,
 * naked, and inside of an anti-magic field?"
 */
const FOUNDATION = {
  ABILITY_SCORES: {
    STRENGTH: 'foundation:ability_scores:strength',
    DEXTERITY: 'foundation:ability_scores:dexterity',
    CONSTITUTION: 'foundation:ability_scores:constitution',
    INTELLIGENCE: 'foundation:ability_scores:intelligence',
    WISDOM: 'foundation:ability_scores:wisdom',
    CHARISMA: 'foundation:ability_scores:charisma',
  },

  // deprecated; move to accumulation
  ABILITY_MODIFIERS: {
    STRENGTH: 'foundation:ability_modifiers:strength',
    DEXTERITY: 'foundation:ability_modifiers:dexterity',
    CONSTITUTION: 'foundation:ability_modifiers:constitution',
    INTELLIGENCE: 'foundation:ability_modifiers:intelligence',
    WISDOM: 'foundation:ability_modifiers:wisdom',
    CHARISMA: 'foundation:ability_modifiers:charisma',
  },

  // This is embedded upon level ups, but CAN be re-generated by parsing the class and racial levels
  SAVES: {
    FORTITUDE: 'foundation:saving_throws:fortitude',
    REFLEX: 'foundation:saving_throws:reflex',
    WILL: 'foundation:saving_throws:will',
  },
  CLASS_SKILLS: 'foundation:skills:class_skills', // array of skills
  SKILL_RANKS: 'foundation:skills:skill_ranks', // dict of skills => ranks, default 0

  BASE_ATTACK_BONUS: 'foundation:base_attack_bonus',
  BASICS: {
    SIZE_CATEGORY: 'foundation:basics:size',
    RACE: 'foundation:basics:race',
    RACE_TAGS: 'foundation:basics:race',
    RACIAL_TEMPLATES: 'foundation:basics:race_templates',
    GENDER: 'foundation:basics:gender',
    WEIGHT: 'foundation:basics:weight',
    HEIGHT: 'foundation:basics:height',
  },

  HIT_DICE: 'foundation:hit_dice',
  HP_ROLLS: 'foundation:hit_point_rolls',
  HIT_POINTS: 'foundation:hit_points',
  CLASS_LEVELS: 'foundation:class_levels',
  RACIAL_LEVELS: 'foundation:racial_levels',


};

/**
 * Adjustments are basically complex calculations for every single stat in the game.
 */
const ADJUSTMENT = {
  // Aggregates pull together all contributors to stats from different sources into a source-by-stat
  // array.  Each node has a value that is an array of structures:
  //
  // Example node for armor_class:
  // [
  //   { from: 'none', stat: 'armor_class', type: 'no_type:base_ac', value: 10, tags: [ 'immutable' ] },
  //   { from: 'dexterity', stat: 'armor_class', type: 'dexterity', value: 1, tags: [ 'immutable' ] },
  //   { from: 'equipment', stat: 'armor_class', type: 'armor', value: 4, tags: [ 'magical' ] },
  //   { from: 'equipment', stat: 'armor_class', type: 'armor_enhancement', value: 2, tags: [ 'magical' ] },
  //   { from: 'race_template', stat: 'armor_class', type: 'racial', value: 1, tags: [ 'racial' ] },
  // ]
  AGGREGATES: {
    STRENGTH: 'adjustment:aggregates:ability_scores:strength',
    DEXTERITY: 'adjustment:aggregates:ability_scores:dexterity',
    CONSTITUTION: 'adjustment:aggregates:ability_scores:constitution',
    INTELLIGENCE: 'adjustment:aggregates:ability_scores:intelligence',
    WISDOM: 'adjustment:aggregates:ability_scores:wisdom',
    CHARISMA: 'adjustment:aggregates:ability_scores:charisma',

    ARMOR_CLASS: 'adjustment:aggregates:combat:armor_class',
    INITIATIVE: 'adjustment:aggregates:combat:initiative',
    MELEE_ATTACK: 'adjustment:aggregates:combat:melee_attack',
    RANGED_ATTACK: 'adjustment:aggregates:combat:ranged_attack',
    MELEE_ATTACK_DAMAGE: 'adjustment:aggregates:combat:melee_attack_damage',
    RANGED_ATTACK_DAMAGE: 'adjustment:aggregates:combat:ranged_attack_damage',

    FORTITUDE_SAVE: 'adjustment:aggregates:saving_throws:fortitude',
    REFLEX_SAVE: 'adjustment:aggregates:saving_throws:reflex',
    WILL_SAVE: 'adjustment:aggregates:saving_throws:will',

    skill: function(skill) {
      if (SkillRepository.allSkills().includes(skill)) {
        return `adjustment:aggregates:skills:${skill}`;
      }
      return null;
    },
  },

  // A rotation of the aggregate (above) column.  It takes all of the values in the aggregation and stacks
  // them by type.
  BREAKDOWNS: {
    STRENGTH: 'adjustment:breakdown:ability_scores:strength',
    DEXTERITY: 'adjustment:breakdown:ability_scores:dexterity',
    CONSTITUTION: 'adjustment:breakdown:ability_scores:constitution',
    INTELLIGENCE: 'adjustment:breakdown:ability_scores:intelligence',
    WISDOM: 'adjustment:breakdown:ability_scores:wisdom',
    CHARISMA: 'adjustment:breakdown:ability_scores:charisma',

    ARMOR_CLASS: 'adjustment:breakdown:combat:armor_class',
    INITIATIVE: 'adjustment:breakdown:combat:initiative',
    MELEE_ATTACK: 'adjustment:breakdown:combat:melee_attack',
    RANGED_ATTACK: 'adjustment:breakdown:combat:ranged_attack',
    MELEE_ATTACK_DAMAGE: 'adjustment:breakdown:combat:melee_attack_damage',
    RANGED_ATTACK_DAMAGE: 'adjustment:breakdown:combat:ranged_attack_damage',

    FORTITUDE_SAVE: 'adjustment:breakdown:saving_throws:fortitude',
    REFLEX_SAVE: 'adjustment:breakdown:saving_throws:reflex',
    WILL_SAVE: 'adjustment:breakdown:saving_throws:will',

    skill: function(skill) {
      if (SkillRepository.allSkills().includes(skill)) {
        return `adjustment:breakdown:skills:${skill}`;
      }
      return null;
    },
    ACROBATICS: 'adjustment:breakdown:skills:acrobatics',
    APPRAISE: 'adjustment:breakdown:skills:appraise',
    // Etc
  },

  // A total bonus discounting conditionals or other situational/external effects; as advertised on the
  // character sheet
  // Each node is an integer value
  TOTAL_BONUSES: {
    STRENGTH: 'adjustment:total_bonuses:ability_scores:strength',
    DEXTERITY: 'adjustment:total_bonuses:ability_scores:dexterity',
    CONSTITUTION: 'adjustment:total_bonuses:ability_scores:constitution',
    INTELLIGENCE: 'adjustment:total_bonuses:ability_scores:intelligence',
    WISDOM: 'adjustment:total_bonuses:ability_scores:wisdom',
    CHARISMA: 'adjustment:total_bonuses:ability_scores:charisma',

    ARMOR_CLASS: 'adjustment:total_bonuses:combat:armor_class',
    INITIATIVE: 'adjustment:total_bonuses:combat:initiative',
    MELEE_ATTACK: 'adjustment:total_bonuses:combat:melee_attack',
    RANGED_ATTACK: 'adjustment:total_bonuses:combat:ranged_attack',
    MELEE_ATTACK_DAMAGE: 'adjustment:total_bonuses:combat:melee_attack_damage',
    RANGED_ATTACK_DAMAGE: 'adjustment:total_bonuses:combat:ranged_attack_damage',
  },

  // deprecated
  ABILITY_SCORES: {
    STRENGTH: 'adjustment:ability_scores:strength',
    DEXTERITY: 'adjustment:ability_scores:dexterity',
    CONSTITUTION: 'adjustment:ability_scores:constitution',
    INTELLIGENCE: 'adjustment:ability_scores:intelligence',
    WISDOM: 'adjustment:ability_scores:wisdom:type',
    CHARISMA: 'adjustment:ability_scores:charisma',
  },
  EQUIPMENT: {
    total_bonus: function(string) {
      const stat = string.toUpperCase();
      if (stat in this.TOTAL_BONUSES) {
        return this.TOTAL_BONUSES[stat];
      }
      throw new Error(`No such bonus: ${string}`);
    },
    TOTAL_BONUSES: {
      STRENGTH: 'adjustment:equipment:bonuses:strength',
      DEXTERITY: 'adjustment:equipment:bonuses:dexterity',
      CONSTITUTION: 'adjustment:equipment:bonuses:constitution',
      INTELLIGENCE: 'adjustment:equipment:bonuses:intelligence',
      WISDOM: 'adjustment:equipment:bonuses:wisdom',
      CHARISMA: 'adjustment:equipment:bonuses:charisma',
      ARMOR_CLASS: 'adjustment:equipment:bonuses:armor_class',
      FORTITUDE_SAVE: 'adjustment:equipment:bonuses:fortitude_save',
      REFLEX_SAVE: 'adjustment:equipment:bonuses:reflex_save',
      WILL_SAVE: 'adjustment:equipment:bonuses:will_save',
      INITIATIVE: 'adjustment:equipment:bonuses:initiative',
    },
    bonus_breakdown: function(string) {
      const stat = string.toUpperCase();
      if (stat in this.BONUS_BREAKDOWNS) {
        return this.BONUS_BREAKDOWNS[stat];
      }
      throw new Error(`No such bonus breakdown: ${string}`);
    },
    BONUS_BREAKDOWNS: {
      STRENGTH: 'adjustment:equipment:bonus_breakdowns:strength',
      DEXTERITY: 'adjustment:equipment:bonus_breakdowns:dexterity',
      CONSTITUTION: 'adjustment:equipment:bonus_breakdowns:constitution',
      INTELLIGENCE: 'adjustment:equipment:bonus_breakdowns:intelligence',
      WISDOM: 'adjustment:equipment:bonus_breakdowns:wisdom',
      CHARISMA: 'adjustment:equipment:bonus_breakdowns:charisma',
      ARMOR_CLASS: 'adjustment:equipment:bonus_breakdowns:armor_class',
      FORTITUDE_SAVE: 'adjustment:equipment:bonus_breakdowns:fortitude_save',
      REFLEX_SAVE: 'adjustment:equipment:bonus_breakdowns:reflex_save',
      WILL_SAVE: 'adjustment:equipment:bonus_breakdowns:will_save',
      INITIATIVE: 'adjustment:equipment:bonus_breakdowns:initiative',
    }
  },
  ATTACK_BONUS: {
    SIZE: 'adjustment:attack_bonus:size',
  },
  ARMOR_CLASS: {
    SIZE: 'adjustment:armor_class:size',
  },
};

/**
 * Accumulations are final values.  They are incapable of accommodating conditionals, but are good summaries of stats
 * in perfectly neutral situations.  Think of them as "stats as advertised" or what you'd put on a character sheet.
 */
const ACCUMULATION = {
  ABILITY_SCORES: {
    STRENGTH: 'accumulation:ability_scores:strength',
    DEXTERITY: 'accumulation:ability_scores:dexterity',
    CONSTITUTION: 'accumulation:ability_scores:constitution',
    INTELLIGENCE: 'accumulation:ability_scores:intelligence',
    WISDOM: 'accumulation:ability_scores:wisdom',
    CHARISMA: 'accumulation:ability_scores:charisma',
  },
  ARMOR_CLASS: {
    BASE: 'accumulation:armor_class:base',
    TOUCH: 'accumulation:armor_class:touch',
    FLAT_FOOTED: 'accumulation:armor_class:flat_footed',
  },
  SAVES: {
    FORTITUDE: 'accumulation:saving_throws:fortitude',
    REFLEX: 'accumulation:saving_throws:reflex',
    WILL: 'accumulation:saving_throws:will',
  },
  COMBAT_MANEUVER: {
    BONUS: 'accumulation:combat_maneuver:bonus',
    DEFENSE: 'accumulation:combat_maneuver:defense',
  },
  ATTACK_BONUS: {
    MELEE: 'accumulation:attack_bonus:melee',
    RANGED: 'accumulation:attack_bonus:ranged',
  },

  CARRYING_CAPACITY: 'accumulation:carrying_capacity',
  INVENTORY_WEIGHT: 'accumulation:inventory:weight',
};
const CONDITIONAL = {
  STRENGTH: 'conditional:strength',
  DEXTERITY: 'conditional:dexterity',
};

const EQUIPMENT = 'equipment';
const INVENTORY = 'inventory';

module.exports = {
  FOUNDATION,
  ADJUSTMENT,
  ACCUMULATION,
  CONDITIONAL,
  EQUIPMENT,
  INVENTORY,
};
